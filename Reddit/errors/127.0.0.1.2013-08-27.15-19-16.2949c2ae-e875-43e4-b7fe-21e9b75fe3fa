(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> too many values to unpack"
p3
sS'layer'
p4
S'/home/umang/web2py/applications/assignmen3/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    #redirect(URL(r=request,f=\'first_page?query=new\'))\n    query=db(db.category.name==\'New\').select(db.category.id)\n    redirect(URL(r=request, f=\'first_page\',args=[int(query[0].id)]))\n\n@auth.requires_login()\ndef login_to_account():\n\tar=db((db.auth_membership.user_id==auth.user_id) & (db.auth_group.id==db.auth_membership.group_id)).select(db.auth_group.role)\n\tif(len(ar)==0):\n\t\tredirect(URL(r=request,f=\'user\'))\n\telif(len(ar)==1):\n\t\tx=db(db.auth_group.role==\'normal\').select(db.auth_group.id)\n\t\tdb.auth_membership.insert(user_id=auth.user_id,group_id=x[0][\'id\'])\n\t\tredirect(URL(r=request,f=\'login_normal\'))\n\telif(ar[1][\'role\']==\'normal\'):\n\t\tredirect(URL(r=request,f=\'login_normal\'))\n\telif(ar[1][\'role\']==\'admin\'):\n\t\tredirect(URL(r=request,f=\'login_admin\'))\n\ndef login_normal():\n\tdisp=db(db.news.user_id==auth.user_id).select(db.news.heading,db.news.url,db.news.category,db.news.ntype)\n\treturn dict(disp=disp)\t\n\ndef first_page():\n\tquery=int(request.args(0))\n\tdisp=db(db.news.category_id==query).select(db.news.heading,db.news.url,db.news.rating,db.news.ntype,db.news.id)\n\tq_comment=db((db.news.category_id==query) & (db.comments.news_id==db.news.id)).select(db.comments.body,db.comments.commentor)\n\tcatg=db(db.category.id>0).select(db.category.name,db.category.id)\n\tpres_catg=db(db.category.id==query).select(db.category.name)\n\tsorted(disp,key=lambda (a,b):-b[2])\n\tform=SQLFORM.factory(\n\t db.Field(\'comm_body\',\'string\',label=""),\n\t formstyle=\'divs\',\n\t buttons=[],)\n   \tform[0].insert(1,DIV(INPUT(_type=\'submit\',_value=\'Post\')))\n   \tif form.accepts(request.vars,session):\n        \t insert_comment(form.vars.comm_body,auth.user_id,query)\n    \telif form.errors:\n        \t response.flash=\'Some Error Occured Please Refresh\'\n    \t\n\treturn dict(query=query,disp=disp,q_comment=q_comment,catg=catg,pres_catg=pres_catg)\n\n@auth.requires_login()\ndef add_news():\n\tcatg=int(request.args(0))\n\tdb.news.category_id.default=catg\n\tdb.news.category_id.readable=False\n\tdb.news.category_id.writable=False\n\tdb.news.user_id.default=auth.user_id\n\tdb.news.user_id.writable=False\n\tdb.news.user_id.readable=False\n\tdb.news.rating.default=100\n\tdb.news.rating.writable=False\n\tdb.news.rating.readable=False\n\tform=SQLFORM(db.news,submit_button="Post",labels={\'ntype\':\'Post Type\'})\n\tif form.process().accepted:\n        \tredirect(URL(r=request, f=\'first_page\',args=[int(catg)]))\n\t\t#redirect(URL(r=request,f=\'first_page?query=%s\' % catg))\n\telif form.errors:\n\t\tresponse.flash="Error posting it"\n\treturn dict(form=form)\n\n@auth.requires_login()\ndef like():\n\tnews_id=int(request.args(0))\n\tcatg=int(request.args(1))\n\tar=db(db.news.id==news_id).select(db.news.rating)\n\tquery=db((db.rating.news_id==news_id) & (db.rating.rater_id==auth.user_id)).select(db.rating.liked)\n\tflag=1\n\t"""\n\tif((len(query)==0) or (query[0].liked==0)):\n\t\tdb(db.news.id==news_id).update(rating=ar[0].rating+5)\n\t\tflag=2\n\t\tif(len(query)==0):\n\t\t\tdb.rating.insert(news_id=news_id,rater_id=auth.user_id,liked=1,disliked=0)\n\t\telse:\n\t\t\tflag=3\n\t\t\tdb((db.rating.news_id==news_id) & (db.rating.rater_id==auth.user_id)).update(liked=1)\n\t#redirect(URL(r=request, f=\'first_page\',args=[int(catg)]))\n\treturn dict(query=query,flag=flag)\n\t"""\n\tif(len(query)==0):\n\t\tdb(db.news.id==news_id).update(rating=ar[0].rating+5)\n\t\tdb.rating.insert(news_id=news_id,rater_id=auth.user_id,liked=1,disliked=0)\n\tredirect(URL(r=request, f=\'first_page\',args=[int(catg)]))\n\n@auth.requires_login()\ndef dislike():\n\tnews_id=int(request.args(0))\n\tcatg=int(request.args(1))\n\tar=db(db.news.id==news_id).select(db.news.rating)\n\tquery=db((db.rating.news_id==news_id) & (db.rating.rater_id==auth.user_id)).select(db.rating.disliked)\n\tif(len(query)==0):\n\t\tdb(db.news.id==news_id).update(rating=ar[0].rating-3)\n\t\tdb.rating.insert(news_id=news_id,rater_id=auth.user_id,liked=0,disliked=1)\n\tredirect(URL(r=request,f=\'first_page\',args=[(int)(catg)]))\n\t#return dict(query=query)\n\n@auth.requires_login()\ndef insert_comment(c_body,rec,query):\n\tdb.comments.insert(body=c_body,sender_id=auth.user_id,receiver=int(rec))\n        query=db(db.coment.id>0).select(db.coment.id,db.coment.receiver)\n        redirect(URL(r=request, f=\'first_page\',args=[int(query)]))\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(first_page)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/umang/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/umang/web2py/applications/assignmen3/controllers/default.py", line 177, in <module>\n  File "/home/umang/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/umang/web2py/applications/assignmen3/controllers/default.py", line 48, in first_page\n    sorted(disp,key=lambda (a,b):-b[2])\n  File "/home/umang/web2py/applications/assignmen3/controllers/default.py", line 48, in <lambda>\n    sorted(disp,key=lambda (a,b):-b[2])\nValueError: too many values to unpack\n'
p11
s.